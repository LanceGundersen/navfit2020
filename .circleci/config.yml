version: 2.1

orbs:
  codecov: codecov/codecov@1.0.2

references:
  workspace: &workspace ~/repo

  container_config: &container_config
    docker:
      - image: circleci/node:10
    working_directory: *workspace

  mac_config: &mac_config
    macos:
      xcode: "12.2.0"
    working_directory: *workspace

jobs:
  build:
    <<: *container_config
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            - v1-dependencies-
      - run: yarn
      - run: chmod -R 777 ~/repo
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
  test:
    <<: *container_config
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run: yarn test
      - codecov/upload:
          file: coverage/clover.xml
      - store_artifacts:
          path: artifacts
          destination: yarnpkg

  deploy_linux:
    <<: *container_config
    parameters:
      publish-edge:
        type: boolean
        default: false
      publish-stable:
        type: boolean
        default: false
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            - v1-dependencies-
      - run: yarn
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run: yarn electron:build -l
      - run:
          name: Remove non-binary files
          shell: /bin/sh
          command: |
            cd ./dist_electron
            ls
            rm -rf bundled linux-unpacked .icon-ico
            rm *.yml
            ls
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            - v1-dependencies-
      - store_artifacts:
          path: dist_electron
          destination: build
      - when:
          condition: << parameters.publish-edge >>
          steps:
            - run:
                name: "Publish to Snap Store in the Edge Channel"
                command: |
                  # Snapcraft Tokens are valid for 1 year. This one expires August 1st, 2021
                  echo $SNAPCRAFT_LOGIN_FILE | base64 --decode --ignore-garbage | snapcraft login --with -
                  snapcraft upload --release=edge *amd64.snap
      - when:
          condition: << parameters.publish-stable >>
          steps:
            - run:
                name: "Publish to Snap Store in the Stable Channel"
                command: |
                  # Snapcraft Tokens are valid for 1 year. This one expires August 1st, 2021
                  echo $SNAPCRAFT_LOGIN_FILE | base64 --decode --ignore-garbage | snapcraft login --with -
                  snapcraft upload --release=stable *amd64.snap

  deploy_mac:
    <<: *mac_config
    steps:
      - checkout
      - restore_cache:
          keys:
            - v3-dependencies-{{ checksum "package.json" }}
            - v3-dependencies-
      - run: yarn install
      - run: yarn electron:build --mac
      - run:
          name: Remove non-binary files
          shell: /bin/sh
          command: |
            cd ./dist_electron
            ls
            rm -rf mac bundled contents .icon-icns
            rm *.yml *.blockmap *.zip
            ls
      - store_artifacts:
          path: dist_electron/
          destination: build/

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build
      - test:
          requires:
            - build
      - deploy_linux:
          name: "Build 'edge' Snap"
          requires:
            - test
          filters:
            branches:
              only:
                - dev
          publish-edge: true
          context: main
      - deploy_linux:
          name: "Build Snap"
          requires:
            - test
          filters:
            branches:
              only:
                - prod
      - deploy_mac:
          filters:
            branches:
              only:
                - prod
          requires:
            - test
